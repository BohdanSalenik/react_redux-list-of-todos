{"version":3,"sources":["actions/actionCreator.ts","redux/rootReducer.ts","constants/constants.ts","api/getData/getData.ts","components/Todo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Type","initialState","todos","devTool","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","state","action","type","payload","sort","a","b","user","name","localeCompare","title","Number","completed","filter","todo","id","BASE_URL","getData","url","fetch","response","json","getTodos","getUsers","connect","dispatch","deleteTask","delTask","className","onClick","sortByName","sortByTitle","sortByComplete","map","item","key","setTodos","setTodosData","useState","isLoading","setIsLoading","prepearedTodos","loadTodos","todosFromApi","usersFromApi","find","person","userId","length","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00abd0af.chunk.js","sourcesContent":["export const Type = {\n  LOAD_FROM_API: 'LOAD_FROM_API',\n  SORT_BY_NAME: 'SORT_BY_NAME',\n  SORT_BY_TITLE: 'SORT_BY_TITLE',\n  SORT_BY_COMPLETE: 'SORT_BY_COMPLETE',\n  DELETE_TASK: 'DELETE_TASK',\n};\n\nexport const setTodos = (todos: PreparedTodo[]) => (\n  { type: Type.LOAD_FROM_API, payload: { todos } });\nexport const sortByName = () => ({ type: Type.SORT_BY_NAME });\nexport const sortByTitle = () => ({ type: Type.SORT_BY_TITLE });\nexport const sortByComplete = () => ({ type: Type.SORT_BY_COMPLETE });\nexport const deleteTask = (id: number) => ({ type: Type.DELETE_TASK, payload: { id } });\n","import { Action, Reducer, createStore } from 'redux';\nimport { Type } from '../actions/actionCreator';\n\nexport interface InitialState {\n  todos: PreparedTodo[] | [];\n}\n\ninterface Payload {\n  todos: PreparedTodo[];\n  id: number;\n}\ninterface DispatchActions extends Action {\n  payload: Payload;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nconst rootReducer: Reducer<InitialState, DispatchActions> = (state = initialState, action) => {\n  switch (action.type) {\n    case Type.LOAD_FROM_API:\n      return {\n        todos: action.payload.todos,\n      };\n\n    case Type.SORT_BY_NAME:\n      return {\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n\n    case Type.SORT_BY_TITLE:\n      return {\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case Type.SORT_BY_COMPLETE:\n      return {\n        todos: [...state.todos].sort((a, b) => Number(b.completed) - Number(a.completed)),\n      };\n\n    case Type.DELETE_TASK:\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.payload.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst devTool = (window as any).__REDUX_DEVTOOLS_EXTENSION__\n    && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const store = createStore(rootReducer, devTool);\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n","import { BASE_URL } from '../../constants/constants';\n\nconst todos = 'todos';\nconst users = 'users';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = async () => {\n  return getData<Todo[]>(`${BASE_URL}${todos}`);\n};\n\nexport const getUsers = async () => {\n  return getData<User[]>(`${BASE_URL}${users}`);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { deleteTask as delTask } from '../actions/actionCreator';\n\ninterface Props {\n  todo: PreparedTodo;\n  deleteTask: (id: number) => void;\n}\n\nconst Todo: React.FC<Props> = ({ todo, deleteTask }) => {\n  return (\n    <tr className=\"table-info\">\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'OK' : 'KO'}</td>\n      <td>\n        {todo.user && (<p>{todo.user.name}</p>)}\n      </td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => deleteTask(todo.id)}\n        >\n          ðŸ—‘\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  deleteTask: (id: number) => dispatch(delTask(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Todo from './Todo';\nimport { sortByName, sortByTitle, sortByComplete } from '../actions/actionCreator';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  sortByTitle: () => void;\n  sortByName: () => void;\n  sortByComplete: () => void;\n}\n\n\nconst TodoList: FC<Props> = ({\n  todos,\n  sortByTitle,\n  sortByComplete,\n  sortByName,\n}) => {\n  return (\n    <>\n      <div>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={sortByTitle}\n        >\n          sort by title\n        </button>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={sortByComplete}\n        >\n          show completed\n        </button>\n        <button\n          className=\"btn btn-info\"\n          type=\"button\"\n          onClick={sortByName}\n        >\n          by user name\n        </button>\n      </div>\n      <table className=\"table-bordered table-center\">\n        <thead>\n          <tr className=\"bg-danger\">\n            <th>Todo</th>\n            <th>Status</th>\n            <th>UserName</th>\n            <th>DELETE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(item => <Todo key={item.id} todo={item} />)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  sortByName: () => dispatch(sortByName()),\n  sortByTitle: () => dispatch(sortByTitle()),\n  sortByComplete: () => dispatch(sortByComplete()),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { FC, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { getTodos, getUsers } from './api/getData/getData';\nimport TodoList from './components/TodoList';\nimport { InitialState } from './redux/rootReducer';\nimport './App.css';\nimport { setTodos as setTodosData } from './actions/actionCreator';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  setTodos: (todos: PreparedTodo[]) => {};\n}\n\nconst App: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const prepearedTodos = [...todos];\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    const todosFromApi = await getTodos();\n    const usersFromApi = await getUsers();\n\n    setTodos(todosFromApi.map(todo => ({\n      ...todo,\n      user: usersFromApi.find(person => person.id === todo.userId) as User,\n    })));\n    setIsLoading(false);\n  };\n\n  if (isLoading) {\n    return <p className=\"loading\">Loading...</p>;\n  }\n\n  return (\n    <div className=\"main\">\n      <div>\n        {!todos.length\n          ? (\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={loadTodos}\n            >\n              Load All\n            </button>\n          )\n          : (\n            <TodoList\n              todos={prepearedTodos}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => {\n  return {\n    todos: state.todos,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: PreparedTodo[]) => dispatch(setTodosData(todos)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/rootReducer';\nimport App from './App';\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}