{"version":3,"sources":["actions/actionCreator.ts","redux/rootReducer.ts","constants/constants.ts","api/getData/getData.ts","components/Todo.tsx","components/TodoList.tsx","utils/getSortedTodos.ts","App.tsx","index.tsx"],"names":["Type","initialState","todos","field","isLoading","devTool","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","state","action","type","payload","sort","filter","todo","id","BASE_URL","getData","url","a","fetch","response","json","getTodos","getUsers","connect","dispatch","deleteTask","removeTask","className","title","completed","user","name","onClick","setSortField","map","item","key","getSortedTodos","b","localeCompare","Number","isLoad","setTodos","setTodosData","value","setIsLoading","loadTodos","todosFromApi","usersFromApi","find","person","userId","length","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.499dddb6.chunk.js","sourcesContent":["export const Type = {\n  LOAD_FROM_API: 'LOAD_FROM_API',\n  SORT_BY_NAME: 'SORT_BY_NAME',\n  SORT_BY_TITLE: 'SORT_BY_TITLE',\n  SORT_BY_COMPLETE: 'SORT_BY_COMPLETE',\n  DELETE_TASK: 'DELETE_TASK',\n  SORT: 'SORT',\n  IS_LOADING: 'IS_LOADING',\n};\n\nexport const setTodos = (todos: PreparedTodo[]) => ({\n  type: Type.LOAD_FROM_API,\n  payload: { todos },\n});\nexport const setSortField = (sort: string) => ({\n  type: Type.SORT,\n  payload: { sort },\n});\nexport const deleteTask = (id: number) => ({\n  type: Type.DELETE_TASK,\n  payload: { id },\n});\nexport const setIsLoading = (value: boolean) => ({\n  type: Type.IS_LOADING,\n  payload: { value },\n});\n","import { Action, Reducer, createStore } from 'redux';\nimport { Type } from '../actions/actionCreator';\n\nexport interface InitialState {\n  todos: PreparedTodo[] | [];\n  field: string;\n  isLoading: boolean;\n}\n\ninterface Payload {\n  todos: PreparedTodo[];\n  id: number;\n  sort: string;\n  isLoading: boolean;\n}\ninterface DispatchActions extends Action {\n  payload: Payload;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n  field: Type.SORT_BY_NAME,\n  isLoading: false,\n};\n\nconst rootReducer: Reducer<InitialState, DispatchActions> = (state = initialState, action) => {\n  switch (action.type) {\n    case Type.LOAD_FROM_API:\n      return {\n        ...state,\n        todos: action.payload.todos,\n      };\n    case Type.SORT:\n      return {\n        ...state,\n        field: action.payload.sort,\n      };\n    case Type.IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload.isLoading,\n      };\n    case Type.DELETE_TASK:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.payload.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst devTool = (window as any).__REDUX_DEVTOOLS_EXTENSION__\n    && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const store = createStore(rootReducer, devTool);\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n","import { BASE_URL } from '../../constants/constants';\n\nconst TODOS = 'todos';\nconst USERS = 'users';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = async () => {\n  return getData<Todo[]>(`${BASE_URL}${TODOS}`);\n};\n\nexport const getUsers = async () => {\n  return getData<User[]>(`${BASE_URL}${USERS}`);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { deleteTask as removeTask } from '../actions/actionCreator';\n\ninterface Props {\n  todo: PreparedTodo;\n  deleteTask: (id: number) => void;\n}\n\nconst Todo: React.FC<Props> = ({ todo, deleteTask }) => {\n  return (\n    <tr className=\"table-info\">\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'OK' : 'KO'}</td>\n      <td>\n        {todo.user && (<p>{todo.user.name}</p>)}\n      </td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => deleteTask(todo.id)}\n        >\n          ðŸ—‘\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  deleteTask: (id: number) => dispatch(removeTask(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Todo from './Todo';\nimport { setSortField as setSort, Type } from '../actions/actionCreator';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  setSortField: (field: string) => void;\n}\n\n\nconst TodoList: FC<Props> = ({\n  todos,\n  setSortField,\n}) => {\n  return (\n    <>\n      <div>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={() => setSortField(Type.SORT_BY_TITLE)}\n        >\n          sort by title\n        </button>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={() => setSortField(Type.SORT_BY_COMPLETE)}\n        >\n          show completed\n        </button>\n        <button\n          className=\"btn btn-info\"\n          type=\"button\"\n          onClick={() => setSortField(Type.SORT_BY_NAME)}\n        >\n          by user name\n        </button>\n      </div>\n      <table className=\"table-bordered table-center\">\n        <thead>\n          <tr className=\"bg-danger\">\n            <th>Todo</th>\n            <th>Status</th>\n            <th>UserName</th>\n            <th>DELETE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(item => <Todo key={item.id} todo={item} />)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setSortField: (field: string) => dispatch(setSort(field)),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import { Type } from '../actions/actionCreator';\nimport { InitialState } from '../redux/rootReducer';\n\nexport const getSortedTodos = (state: InitialState): PreparedTodo[] => {\n  const { todos, field } = state;\n\n  switch (field) {\n    case Type.SORT_BY_NAME:\n      return [...todos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n\n    case Type.SORT_BY_TITLE:\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case Type.SORT_BY_COMPLETE:\n      return [...todos].sort((a, b) => Number(b.completed) - Number(a.completed));\n    default:\n      return todos;\n  }\n};\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { getTodos, getUsers } from './api/getData/getData';\nimport TodoList from './components/TodoList';\nimport { InitialState } from './redux/rootReducer';\nimport './App.css';\nimport { setTodos as setTodosData, setIsLoading } from './actions/actionCreator';\nimport { getSortedTodos } from './utils/getSortedTodos';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  setTodos: (todos: PreparedTodo[]) => void;\n  isLoading: (value: boolean) => void;\n  isLoad: boolean;\n}\n\nconst App: FC<Props> = ({\n  todos,\n  setTodos,\n  isLoading,\n  isLoad,\n}) => {\n  const loadTodos = async () => {\n    isLoading(true);\n    const todosFromApi = await getTodos();\n    const usersFromApi = await getUsers();\n\n    setTodos(todosFromApi.map(todo => ({\n      ...todo,\n      user: usersFromApi.find(person => person.id === todo.userId) as User,\n    })));\n    isLoading(false);\n  };\n\n  if (isLoad) {\n    return <p className=\"loading\">Loading...</p>;\n  }\n\n  return (\n    <div className=\"main\">\n      <div>\n        {!todos.length\n          ? (\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={loadTodos}\n            >\n              Load All\n            </button>\n          )\n          : (\n            <TodoList\n              todos={[...todos]}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => {\n  return {\n    todos: getSortedTodos(state),\n    isLoad: state.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: PreparedTodo[]) => dispatch(setTodosData(todos)),\n  isLoading: (value: boolean) => dispatch(setIsLoading(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/rootReducer';\nimport App from './App';\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}