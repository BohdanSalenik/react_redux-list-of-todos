{"version":3,"sources":["constants/constants.ts","redux/rootReducer.ts","api/getData/getData.ts","components/Todo.tsx","actions/actionCreator.ts","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","initialState","todos","store","createStore","state","action","type","payload","sort","a","b","user","name","localeCompare","title","Number","completed","filter","todo","id","getData","url","fetch","response","json","getTodos","getUsers","connect","dispatch","deleteTask","delTask","className","onClick","sortByName","sortByTitle","sortByComplete","map","item","key","setTodos","setTodosData","useState","isLoading","setIsLoading","prepearedTodos","loadTodos","todosFromApi","usersFromApi","find","person","userId","length","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae9adf4c.chunk.js","sourcesContent":["export const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const LOAD_FROM_API = 'LOAD_FROM_API';\nexport const SORT_BY_NAME = 'SORT_BY_NAME';\nexport const SORT_BY_TITLE = 'SORT_BY_TITLE';\nexport const SORT_BY_COMPLETE = 'SORT_BY_COMPLETE';\nexport const DELETE_TASK = 'DELETE_TASK';\n","import { Action, Reducer, createStore } from 'redux';\nimport {\n  LOAD_FROM_API,\n  SORT_BY_NAME,\n  SORT_BY_TITLE,\n  SORT_BY_COMPLETE,\n  DELETE_TASK,\n} from '../constants/constants';\n\nexport interface InitialState {\n  todos: PreparedTodo[] | [];\n}\n\ninterface DispatchActions extends Action {\n  type: string;\n  payload: PreparedTodo[];\n  id?: number;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nconst rootReducer: Reducer<InitialState, DispatchActions> = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_FROM_API:\n      return {\n        todos: action.payload,\n      };\n\n    case SORT_BY_NAME:\n      return {\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n\n    case SORT_BY_TITLE:\n      return {\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case SORT_BY_COMPLETE:\n      return {\n        todos: [...state.todos].sort((a, b) => Number(b.completed) - Number(a.completed)),\n      };\n\n    case DELETE_TASK:\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(rootReducer);\n","import { BASE_URL } from '../../constants/constants';\n\nconst todos = 'todos';\nconst users = 'users';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = async () => {\n  return getData<Todo[]>(`${BASE_URL}${todos}`);\n};\n\nexport const getUsers = async () => {\n  return getData<User[]>(`${BASE_URL}${users}`);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { deleteTask as delTask } from '../actions/actionCreator';\n\ninterface Props {\n  todo: PreparedTodo;\n  deleteTask: (id: number) => void;\n}\n\nconst Todo: React.FC<Props> = ({ todo, deleteTask }) => {\n  return (\n    <tr className=\"table-info\">\n      <td>{todo.title}</td>\n      <td>{todo.completed ? 'OK' : 'KO'}</td>\n      <td>\n        {todo.user && (<p>{todo.user.name}</p>)}\n      </td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => deleteTask(todo.id)}\n        >\n          ðŸ—‘\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  deleteTask: (id: number) => dispatch(delTask(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import {\n  LOAD_FROM_API,\n  SORT_BY_NAME,\n  SORT_BY_TITLE,\n  SORT_BY_COMPLETE,\n  DELETE_TASK,\n} from '../constants/constants';\n\nexport const setTodos = (todos: PreparedTodo[]) => ({ type: LOAD_FROM_API, payload: todos });\nexport const sortByName = () => ({ type: SORT_BY_NAME });\nexport const sortByTitle = () => ({ type: SORT_BY_TITLE });\nexport const sortByComplete = () => ({ type: SORT_BY_COMPLETE });\nexport const deleteTask = (id: number) => ({ type: DELETE_TASK, id });\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Todo from './Todo';\nimport { sortByName, sortByTitle, sortByComplete } from '../actions/actionCreator';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  sortByTitle: () => void;\n  sortByName: () => void;\n  sortByComplete: () => void;\n}\n\n\nconst TodoList: FC<Props> = ({\n  todos,\n  sortByTitle,\n  sortByComplete,\n  sortByName,\n}) => {\n  return (\n    <>\n      <div>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={sortByTitle}\n        >\n          sort by title\n        </button>\n        <button\n          className=\"btn btn-info button-margin\"\n          type=\"button\"\n          onClick={sortByComplete}\n        >\n          show completed\n        </button>\n        <button\n          className=\"btn btn-info\"\n          type=\"button\"\n          onClick={sortByName}\n        >\n          by user name\n        </button>\n      </div>\n      <table className=\"table-bordered table-center\">\n        <thead>\n          <tr className=\"bg-danger\">\n            <th>Todo</th>\n            <th>Status</th>\n            <th>UserName</th>\n            <th>DELETE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(item => <Todo key={item.id} todo={item} />)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  sortByName: () => dispatch(sortByName()),\n  sortByTitle: () => dispatch(sortByTitle()),\n  sortByComplete: () => dispatch(sortByComplete()),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { FC, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { getTodos, getUsers } from './api/getData/getData';\nimport TodoList from './components/TodoList';\nimport { InitialState } from './redux/rootReducer';\nimport './App.css';\nimport { setTodos as setTodosData } from './actions/actionCreator';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  setTodos: (todos: PreparedTodo[]) => {};\n}\n\nconst App: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const prepearedTodos = [...todos];\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    const todosFromApi = await getTodos();\n    const usersFromApi = await getUsers();\n\n    setTodos(todosFromApi.map(todo => ({\n      ...todo,\n      user: usersFromApi.find(person => person.id === todo.userId) as User,\n    })));\n    setIsLoading(false);\n  };\n\n  if (isLoading) {\n    return <p className=\"loading\">Loading...</p>;\n  }\n\n  return (\n    <div className=\"main\">\n      <div>\n        {!todos.length\n          ? (\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={loadTodos}\n            >\n              Load All\n            </button>\n          )\n          : (\n            <TodoList\n              todos={prepearedTodos}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => {\n  return {\n    todos: state.todos,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: PreparedTodo[]) => dispatch(setTodosData(todos)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/rootReducer';\nimport App from './App';\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}